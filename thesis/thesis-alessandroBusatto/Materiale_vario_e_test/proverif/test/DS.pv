free c.                                             (* public channel *)
fun pk/1.                                           (* public key *)
fun encrypt/2.                                      (* asymmetric encryption *)
fun sign/2.                                         (* signature *)
fun sencrypt/2.                                     (* symmetric encryption *)

reduc decrypt(encrypt(x, pk(y)), y) = x.            (* asymmetric decryption *)
reduc getmess(sign(m, k)) = m.                      (* get message from signature *)
reduc checksign(sign(m, k), pk(k)) = m.             (* check signature *)
reduc sdecrypt(sencrypt(x, y), y) = x.              (* symmetric decryption *)

not skA.                                            (* secrecy assumption: skA and skB cannot be *)
not skB.                                            (* proved from the rules *)

private free secretB.                               (* secret s sent from B to A *)
query attacker: secretB.                            (* secrecy query *)

let A =
    in(c, pkP);                                     (* process macro; nb: pkP is a variable *)
    new kAP;                                        (* shared key *)
    out(c, (encrypt(sign((pkP, kAP), skA), pkP))).  (* A -> B : {| {| kAB |}skA |}pkB *)

let B =
    in(c, km);                                      (* B receives the msg *)
    let ks = decrypt(km, skB) in                    (* B decrypts the msg *)
        let (=pkB, kAB) = checksign(ks, pkA) in     (* checks the signature *)
            out(c, sencrypt(secretB, kAB)).         (* B -> A : { s }kAB *)

process
    new skA;                                        (* A`s secret key *)
    let pkA = pk(skA) in                            (* A`s public key *)
        new skB;                                    (* B`s secret key *)
        let pkB = pk(skB) in                        (* B`s public key *)
            out(c, pkB);                            (* B`s public key available on c *)
            ((!A) | (!B))                           (* execution of the protocol *)
