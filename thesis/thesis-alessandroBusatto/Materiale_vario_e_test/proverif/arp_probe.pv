type ipv4.
type MAC.

free c : channel.

fun concat(bitstring, bitstring, bitstring, bitstring, MAC, ipv4, MAC, ipv4):bitstring.

reduc forall x0: bitstring, x1: bitstring,x2: bitstring,x3: bitstring,x4:MAC, x5:ipv4, x6:MAC, x7:ipv4;
deconcat(concat(x0, x1,x2,x3,x4, x5, x6, x7))=(x0, x1,x2,x3,x4, x5, x6, x7).


(*query x0:bitstring,x1:bitstring,x2:bitstring,x3:bitstring,x4:MAC,x5:ipv4,x6:MAC,x7:ipv4;
inj-event(endAfull(x0,x1,x2,x3,x4,x5,x6,x7)) ==> inj-event(beginBfull(x0,x1,x2,x3,x4,x5,x6,x7)).

event endAfull(bitstring, bitstring, bitstring, bitstring, MAC, ipv4, MAC, ipv4).
event beginBfull(bitstring, bitstring, bitstring, bitstring, MAC, ipv4, MAC, ipv4).*)

(*not attacker(new ar_tpa).*)

(*query secret as_sha.*)


(*query attacker(as_tpa).*)

free as_tpa:ipv4 [private].

query attacker(as_tpa).

let A =
  new as_hrd:bitstring;
  new as_pro:bitstring;
  new as_pln:bitstring;
  new request:bitstring;
  new as_sha:MAC;
  new as_spa:ipv4;
  new as_tha:MAC;
  (*new as_tpa:ipv4;*)

  (*endAfull(as_hrd,as_pro, as_pln, request, as_sha, as_tha, as_tpa);*)
  (*let msg = concat(as_hrd,as_pro, as_pln, request, as_sha, as_spa, as_tha, as_tpa) in
  out (c,msg).*)
  out(c,concat(as_hrd,as_pro, as_pln, request, as_sha, as_spa, as_tha, as_tpa)).


let B =
  (*in (c, (x0: bitstring, x1: bitstring,x2: bitstring,x3: bitstring,x4:MAC, x5:ipv4, x6:MAC, x7:ipv4)).*)
  in (c, m:bitstring).
  (*beginBfull(x0,x1,x2,x3,x4,x5,x6,x7);*)

  process
    !A|!B
