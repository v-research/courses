attacker[active]

principal Server[
    //Conosce le chiavi condivise con i due principal, in realtà dovrebbe conoscere tutte le chiavi condivise con altri principal
	knows private k_is
	knows private k_rs
]

principal Initiator[
    //conosce il nome dei principal coinvolti nel protocollo
	knows private i_name
	knows private r_name
    //conosce la chiave condivisa con il server
	knows private k_is
    //genera il nonce n_i
	generates n_i
]

principal Recipient[
    //conosce il suo nome... OVVIAMENTE ma serve per i check
	knows private r_name
    //conosce la chiave condivisa con il server
	knows private k_rs
    //genera il nonce n_r
	generates n_r
]

Initiator -> Server: i_name, r_name, n_i

principal Server[
	//genera la chiave tra i due principal
	generates k_ir
	//prepara il pacchetto per il recipient cifrato con la chiave condivisa con lui
	e_recipient = AEAD_ENC(k_rs, CONCAT(k_ir, i_name), nil)
	//prepara il pacchetto per l'initiator cifrato con la chiave condivisa con lui
	e_initiator = AEAD_ENC(k_is, CONCAT(n_i, k_ir, r_name, e_recipient), nil)
]

Server -> Initiator: e_initiator

principal Initiator[
	//decifra il pacchetto con la chiave condivisa con il server
	e_initiator_dec = AEAD_DEC(k_is, e_initiator, nil)
	//salva i dati del pacchetto
	n_i_response, k_ir_initiator, r_name_initiator, e_recipient_initiator = SPLIT(e_initiator_dec)
	//controlla che il nonce sia lo stesso, quindi che la comunicazione sia fresh
	_ = ASSERT(n_i, n_i_response)
	//controlla che il destinatario per la comunicazione sia proprio quello con cui voleva comunicare
    _ = ASSERT(r_name, r_name_initiator)
]

Initiator -> Recipient: e_recipient_initiator

principal Recipient[
	//decifra il pacchetto con la chiave condivisa con il server
	e_recipient_dec = AEAD_DEC(k_rs, e_recipient_initiator, nil)
	//salva i dati del pacchetto
	k_ir_recipient, i_name_recipient = SPLIT(e_recipient_dec)
	//crea un pacchetto con il suo nonce per fare l'ack con l'initiator cifrato con la chiave condivisa tra lui e l'initiator
	e_n_r = AEAD_ENC(k_ir_recipient, n_r, nil)
]

Recipient -> Initiator: e_n_r

principal Initiator[
	//decifra  il pacchetto con la chiave condivisa con il recipient
	n_r_initiator = AEAD_DEC(k_ir_initiator, e_n_r, nil)
	//fa l'hash del nonce estratto (perchè in verifpal non è possibile fare il -1, non è un'operazione ammessa ma va bene uguale)
	n_r_minus_one = HASH(n_r_initiator)
	//cifra il nuovo nonce con la chiave condivisa con il recipient
	e_n_r_minus_one = AEAD_ENC(k_ir_initiator, n_r_minus_one, nil)
]

Initiator -> Recipient: e_n_r_minus_one

principal Recipient[
	//estra i dati cifrati con la chiave condivisa con l'initiator
	n_r_minus_one_recipient = AEAD_DEC(k_ir_recipient, e_n_r_minus_one, nil)
	//fa il check del nonce per vedere che effettivamente sta comunicando con qualcuno che conosce la chiave ed è una comunicazione fresh
	_ = ASSERT(n_r_minus_one_recipient, HASH(n_r))
]

//phase[1]

// principal Server[
// 	leaks k_ir
// ]

queries[
 	//confidentiality? k_ir
	//confidentiality? n_r_minus_one_recipient
	//authentication? Initiator -> Recipient: e_recipient_initiator
	//authentication? Initiator -> Recipient: e_n_r_minus_one
	authentication? Recipient -> Initiator: e_n_r
]
