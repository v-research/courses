attacker[active]

principal Server[
	knows private k_is
	knows private k_rs
]

principal Initiator[
	knows private i_name
	knows private r_name
	knows private k_is
	generates n_i
]

principal Recipient[
	knows private r_name
	knows private k_rs
	generates n_r
]

Initiator -> Server: i_name, r_name, n_i

principal Server[
	generates k_ir
	e_recipient = AEAD_ENC(k_rs, CONCAT(k_ir, i_name), nil)
	e_initiator = AEAD_ENC(k_is, CONCAT(n_i, k_ir, r_name, e_recipient), nil)
]

Server -> Initiator: e_initiator

principal Initiator[
	e_initiator_dec = AEAD_DEC(k_is, e_initiator, nil)
	n_i_response, k_ir_initiator, r_name_initiator, e_recipient_initiator = SPLIT(e_initiator_dec)
	_ = ASSERT(n_i, n_i_response)
	_ = ASSERT(r_name, r_name_initiator)
]

Initiator -> Recipient: e_recipient_initiator

principal Recipient[
	e_recipient_dec = AEAD_DEC(k_rs, e_recipient_initiator, nil)
	k_ir_recipient, i_name_recipient = SPLIT(e_recipient_dec)
	e_n_r = AEAD_ENC(k_ir_recipient, n_r, nil)
]

Recipient -> Initiator: e_n_r

principal Initiator[
	n_r_initiator = AEAD_DEC(k_ir_initiator, e_n_r, nil)
	n_r_minus_one = HASH(n_r_initiator)
	e_n_r_minus_one = AEAD_ENC(k_ir_initiator, n_r_minus_one, nil)
]

Initiator -> Recipient: e_n_r_minus_one

principal Recipient[
	n_r_minus_one_recipient = AEAD_DEC(k_ir_recipient, e_n_r_minus_one, nil)
	_ = ASSERT(n_r_minus_one_recipient, HASH(n_r))
]

principal Server[
	leaks k_ir
]

queries[
	confidentiality? k_ir
 	confidentiality? n_r_minus_one
	authentication? Initiator -> Recipient: e_n_r_minus_one
]
